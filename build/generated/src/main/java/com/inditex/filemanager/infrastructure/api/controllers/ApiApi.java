/*
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.16.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.inditex.filemanager.infrastructure.api.controllers;

import com.inditex.filemanager.domain.model.Asset;
import com.inditex.filemanager.domain.model.AssetFileUploadRequest;
import com.inditex.filemanager.domain.model.AssetFileUploadResponse;
import org.springframework.lang.Nullable;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.ExampleObject;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-10-14T15:54:06.194378300+02:00[Europe/Madrid]", comments = "Generator version: 7.16.0")
@Validated
@Tag(name = "asset", description = "the asset API")
public interface ApiApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    public static final String PATH_GET_ASSETS_BY_FILTER = "/api/mgmt/1/assets/";
    /**
     * GET /api/mgmt/1/assets/ : Allows searching (&amp; filtering) all the uploaded/registered assets.
     * Allows searching (&amp; filtering) all the uploaded/registered assets.
     *
     * @param uploadDateStart The start date for the range. (optional)
     * @param uploadDateEnd The end date for the range. (optional)
     * @param filename The filename expression for file filtering (regex). (optional)
     * @param filetype The file types for file filtering (one at a time). (optional)
     * @param sortDirection  (optional)
     * @return Returns a list of assets matching the specified criteria. (status code 200)
     *         or Malformed request. (status code 400)
     *         or An unexpected error occurred. (status code 500)
     */
    @Operation(
        operationId = "getAssetsByFilter",
        summary = "Allows searching (& filtering) all the uploaded/registered assets.",
        description = "Allows searching (& filtering) all the uploaded/registered assets.",
        tags = { "asset" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returns a list of assets matching the specified criteria.", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Asset.class)))
            }),
            @ApiResponse(responseCode = "400", description = "Malformed request."),
            @ApiResponse(responseCode = "500", description = "An unexpected error occurred.")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = ApiApi.PATH_GET_ASSETS_BY_FILTER,
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<Asset>> getAssetsByFilter(
        @Parameter(name = "uploadDateStart", description = "The start date for the range.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "uploadDateStart", required = false) @Nullable String uploadDateStart,
        @Parameter(name = "uploadDateEnd", description = "The end date for the range.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "uploadDateEnd", required = false) @Nullable String uploadDateEnd,
        @Parameter(name = "filename", description = "The filename expression for file filtering (regex).", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filename", required = false) @Nullable String filename,
        @Parameter(name = "filetype", description = "The file types for file filtering (one at a time).", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filetype", required = false) @Nullable String filetype,
        @Parameter(name = "sortDirection", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "sortDirection", required = false) @Nullable String sortDirection
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"filename\" : \"filename\", \"size\" : 0, \"uploadDate\" : \"uploadDate\", \"id\" : \"id\", \"contentType\" : \"contentType\", \"url\" : \"url\" }, { \"filename\" : \"filename\", \"size\" : 0, \"uploadDate\" : \"uploadDate\", \"id\" : \"id\", \"contentType\" : \"contentType\", \"url\" : \"url\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    public static final String PATH_UPLOAD_ASSET_FILE = "/api/mgmt/1/assets/actions/upload";
    /**
     * POST /api/mgmt/1/assets/actions/upload : Performs an upload of the requested asset file.
     * Performs an upload of the requested asset file.
     *
     * @param assetFileUploadRequest  (required)
     * @return The operation was accepted by the backend. (status code 202)
     *         or An unexpected error occurred. (status code 500)
     */
    @Operation(
        operationId = "uploadAssetFile",
        summary = "Performs an upload of the requested asset file.",
        description = "Performs an upload of the requested asset file.",
        tags = { "asset" },
        responses = {
            @ApiResponse(responseCode = "202", description = "The operation was accepted by the backend.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AssetFileUploadResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "An unexpected error occurred.")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = ApiApi.PATH_UPLOAD_ASSET_FILE,
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<AssetFileUploadResponse> uploadAssetFile(
        @Parameter(name = "AssetFileUploadRequest", description = "", required = true) @Valid @RequestBody AssetFileUploadRequest assetFileUploadRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"id\" : \"id\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
